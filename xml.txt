
public static List<XmlUtil.ChildElement> toChildElements(DataTable table) {
    List<XmlUtil.ChildElement> children = new ArrayList<>();

    for (Map<String, String> row : table.asMaps()) {
        String name = row.get("name");
        String text = row.get("text");

        Map<String, String> attrs = new HashMap<>();
        for (Map.Entry<String, String> entry : row.entrySet()) {
            if (!entry.getKey().equals("name") && !entry.getKey().equals("text")
                    && entry.getValue() != null && !entry.getValue().isBlank()) {
                attrs.put(entry.getKey(), entry.getValue());
            }
        }

        children.add(new XmlUtil.ChildElement(name, text, attrs.isEmpty() ? null : attrs));
    }

    return children;
}

@And("the element has child elements")
public void theElementHasChildElements(DataTable table) {
    Document doc = scenarioContext.get("doc", Document.class);
    Element parent = scenarioContext.get("lastElement", Element.class); // store this after insertion
    String namespaceUri = scenarioContext.get("namespaceUri", String.class);
    String prefix = scenarioContext.get("prefix", String.class); // e.g., "po"

    List<XmlUtil.ChildElement> children = XmlDataTableUtil.toChildElements(table);

    XmlUtil.addChildElements(doc, parent, namespaceUri, prefix, children);
}


public static void addChildElements(
        Document doc,
        Element parent,
        String namespaceUri,
        String prefix,
        List<ChildElement> children
) {
    for (ChildElement child : children) {
        String localName = child.qualifiedName.contains(":")
                ? child.qualifiedName.split(":", 2)[1]
                : child.qualifiedName;

        String qualifiedName = (prefix != null && !prefix.isEmpty())
                ? prefix + ":" + localName
                : localName;

        Element childElement = doc.createElementNS(namespaceUri, qualifiedName);

        if (child.text != null) {
            childElement.setTextContent(child.text);
        }

        if (child.attributes != null) {
            for (Map.Entry<String, String> attr : child.attributes.entrySet()) {
                childElement.setAttribute(attr.getKey(), attr.getValue());
            }
        }

        parent.appendChild(childElement);
    }
}
