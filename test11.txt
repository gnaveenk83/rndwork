public static Document addElementFromDataTable(
        Document doc,
        Node parent,
        String namespace,
        String elementName,
        Map<String, String> elementAttrs,
        DataTable table
) {
    List<Map<String, String>> rows = table.asMaps();
    List<ChildElement> children = new ArrayList<>();

    for (Map<String, String> row : rows) {
        String name = row.get("name");
        String text = row.get("text");

        Map<String, String> childAttrs = new HashMap<>();
        for (Map.Entry<String, String> entry : row.entrySet()) {
            if (!entry.getKey().equals("name") && !entry.getKey().equals("text")
                    && entry.getValue() != null && !entry.getValue().isBlank()) {
                childAttrs.put(entry.getKey(), entry.getValue());
            }
        }

        children.add(new ChildElement(name, text, childAttrs.isEmpty() ? null : childAttrs));
    }

    XmlUtil.addElementWithNamespaceAndChildren(
            doc, parent, namespace, elementName,
            (elementAttrs == null || elementAttrs.isEmpty()) ? null : elementAttrs,
            children
    );

    return doc;
}


public static Element addElementWithOptionalNamespaceAndChildren(
        Document doc,
        Node parent,
        String qualifiedTagName, // e.g., "po:DeliveryDetails"
        Map<String, String> elementAttributes,
        List<ChildElement> children // each with name, text, and optional attributes
) {
    String prefix = qualifiedTagName.contains(":") ? qualifiedTagName.split(":")[0] : null;
    String namespaceUri = null;

    // Try to find existing xmlns:prefix in parent chain
    if (prefix != null) {
        namespaceUri = findNamespaceUri(parent, prefix);
    }

    Element element = namespaceUri != null
            ? doc.createElementNS(namespaceUri, qualifiedTagName)
            : doc.createElement(qualifiedTagName);

    // Auto-declare xmlns:prefix on this element if not already present
    if (prefix != null && namespaceUri != null && !element.hasAttribute("xmlns:" + prefix)) {
        element.setAttribute("xmlns:" + prefix, namespaceUri);
    }

    // Add attributes
    if (elementAttributes != null) {
        for (Map.Entry<String, String> attr : elementAttributes.entrySet()) {
            element.setAttribute(attr.getKey(), attr.getValue());
        }
    }

    // Add children
    if (children != null) {
        for (ChildElement child : children) {
            String childQualifiedName = child.qualifiedName;
            if (prefix != null && !childQualifiedName.contains(":")) {
                childQualifiedName = prefix + ":" + childQualifiedName;
            }

            Element childElement = namespaceUri != null
                    ? doc.createElementNS(namespaceUri, childQualifiedName)
                    : doc.createElement(childQualifiedName);

            childElement.setTextContent(child.text);

            if (child.attributes != null) {
                for (Map.Entry<String, String> attr : child.attributes.entrySet()) {
                    childElement.setAttribute(attr.getKey(), attr.getValue());
                }
            }

            element.appendChild(childElement);
        }
    }

    parent.appendChild(element);
    return element;
}


private static String findNamespaceUri(Node node, String prefix) {
    while (node != null && node.getNodeType() == Node.ELEMENT_NODE) {
        Element el = (Element) node;
        String attrName = "xmlns:" + prefix;
        if (el.hasAttribute(attrName)) {
            return el.getAttribute(attrName);
        }
        node = node.getParentNode();
    }
    return null; // fallback
}

@And("it has child elements")
public void itHasChildElements(DataTable table) {
    Document doc = XmlUtil.addElementFromDataTable(
        (Document) scenarioContext.get("doc"),
        (Node) scenarioContext.get("parentNode"),
        (String) scenarioContext.get("namespace"),
        (String) scenarioContext.get("elementName"),
        (Map<String, String>) scenarioContext.get("elementAttrs"),
        table
    );

    scenarioContext.put("requestXml", XmlUtil.toString(doc)); // only here!
}


public static Document addElementFromDataTableOptionalNamespace(
        Document doc,
        Node parent,
        String qualifiedElementName,
        Map<String, String> elementAttrs,
        DataTable table
) {
    List<Map<String, String>> rows = table.asMaps();
    List<ChildElement> children = new ArrayList<>();

    for (Map<String, String> row : rows) {
        String name = row.get("name");
        String text = row.get("text");

        Map<String, String> childAttrs = new HashMap<>();
        for (Map.Entry<String, String> entry : row.entrySet()) {
            if (!entry.getKey().equals("name") && !entry.getKey().equals("text")
                    && entry.getValue() != null && !entry.getValue().isBlank()) {
                childAttrs.put(entry.getKey(), entry.getValue());
            }
        }

        children.add(new ChildElement(name, text, childAttrs.isEmpty() ? null : childAttrs));
    }

    XmlUtil.addElementWithOptionalNamespaceAndChildren(
            doc,
            parent,
            qualifiedElementName,
            (elementAttrs == null || elementAttrs.isEmpty()) ? null : elementAttrs,
            children
    );

    return doc;
}





 public static Node getNodeByXPath(Document doc, String xpathExpression) {
        try {
            return (Node) xPath.evaluate(xpathExpression, doc, XPathConstants.NODE);
        } catch (XPathExpressionException e) {
            throw new RuntimeException("Invalid XPath: " + xpathExpression, e);
        }
    }

    // Optional: also get NodeList
    public static Node[] getNodesByXPath(Document doc, String xpathExpression) {
        try {
            var nodeList = (org.w3c.dom.NodeList) xPath.evaluate(xpathExpression, doc, XPathConstants.NODESET);
            Node[] result = new Node[nodeList.getLength()];
            for (int i = 0; i < nodeList.getLength(); i++) {
                result[i] = nodeList.item(i);
            }
            return result;
        } catch (XPathExpressionException e) {
            throw new RuntimeException("Invalid XPath: " + xpathExpression, e);
        }
    }
